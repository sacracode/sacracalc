# -*- coding: utf-8 -*-
"""SacraCalc Prototype v0.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eCBl4EznNqiObJJXLj8jUc1vTDfTCXpd
"""
# SacraCalc v1.0 – Complete Code (Single Cell)
import requests
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML

# --- Constants ---
currency_rates = {'USD': 1, 'EUR': 1.1, 'CAD': 0.75, 'MXN': 0.059, 'BRICS': 0.2}
inflation_rates = {'USD': 0.04, 'EUR': 0.05, 'CAD': 0.03, 'MXN': 0.08, 'BRICS': 0.10}
btc_growth_rate = 0.45
market_news = {
    'USD': "🇺🇸 U.S. passed crypto laws to support investment and reduce legal uncertainty.",
    'EUR': "🇪🇺 Europe introduced MiCA rules to reduce scams and protect users.",
    'CAD': "🇨🇦 Canada supports crypto with official Bitcoin ETFs.",
    'MXN': "🇲🇽 Peso is impacted by U.S. inflation and local volatility.",
    'BRICS': "🌍 BRICS exploring digital and gold-backed currencies."
}

# --- Live BTC Price Fetch ---
def get_btc_price_usd():
    try:
        url = "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
        return requests.get(url).json()['bitcoin']['usd']
    except:
        return 111000

# --- Widgets ---
amount_input = widgets.FloatText(value=100, description="💰 Amount:")
years_input = widgets.IntText(value=1, description="📅 Years:")
months_input = widgets.IntText(value=0, description="📆 Months:")
currency_dropdown = widgets.Dropdown(options=currency_rates.keys(), value='USD', description="🌍 Currency:")
language_toggle = widgets.ToggleButtons(options=['English', 'Español'], value='English', description='🌐 Language:')
run_button = widgets.Button(description='🔍 Calculate', button_style='success')
output = widgets.Output()

# CTA Button
learn_more_link = widgets.HTML(
    '<a href="https://www.tiktok.com/@sacracode" target="_blank">'
    '<button style="background-color:#000000;color:white;padding:6px 12px;border:none;border-radius:5px;cursor:pointer;">📲 Learn More on TikTok</button>'
    '</a>'
)

# --- Main Logic ---
def simulate_projection(change):
    output.clear_output()
    with output:
        lang = language_toggle.value
        currency = currency_dropdown.value
        fiat = amount_input.value
        years = years_input.value + months_input.value / 12
        btc_price_usd = get_btc_price_usd()
        rate = currency_rates[currency]
        inflation = inflation_rates[currency]

        fiat_usd = fiat * rate
        adjusted_fiat_usd = fiat_usd * (1 - inflation) ** years
        future_btc_price_usd = btc_price_usd * (1 + btc_growth_rate) ** years

        btc_now = fiat_usd / btc_price_usd
        btc_future = adjusted_fiat_usd / future_btc_price_usd
        sats_now = int(btc_now * 100_000_000)
        sats_future = int(btc_future * 100_000_000)
        sats_diff = sats_now - sats_future

        adjusted_fiat_local = adjusted_fiat_usd / rate
        loss_value = fiat - adjusted_fiat_local
        future_cost = fiat / ((1 - inflation) ** years)
        power_loss_pct = (future_cost - fiat) / fiat * 100

        future_btc_value_local = btc_now * future_btc_price_usd / rate
        future_btc_price_local = future_btc_price_usd / rate

        time_str = f"{int(years)}y {int((years % 1)*12)}m" if months_input.value > 0 else f"{int(years)} years"

        # Text Output
        if lang == "English":
            print(f"💡 Your Setup:")
            print(f"• You entered: {fiat:.2f} {currency}")
            print(f"• Timeframe: {time_str}")
            print(f"• Live BTC price: ${btc_price_usd:,.2f} USD")
            print(f"• Inflation rate ({currency}): {inflation*100:.1f}%")
            print(f"• BTC growth assumption: {btc_growth_rate*100:.1f}% annually\n")

            print("📈 What This Means:")
            print(f"• Future BTC price: ${future_btc_price_usd:,.2f} USD")
            print(f"• BTC you could buy today: {btc_now:.8f} BTC ({sats_now:,} sats)")
            print(f"• BTC you could buy in {time_str}: {btc_future:.8f} BTC ({sats_future:,} sats)")
            print(f"• Buying now gives you ≈ {sats_diff:,} sats more\n")

            print(f"💰 {currency} Projections:")
            print(f"• Your {fiat:.2f} {currency} after inflation: {adjusted_fiat_local:.2f} {currency}")
            print(f"• Inflation reduced your {fiat:.2f} {currency} to ≈ {adjusted_fiat_local:.2f}")
            print(f"• That's a projected loss of ≈ {loss_value:.2f} {currency} in value\n")

            print("🛒 Purchasing Power:")
            print(f"• What costs {fiat:.0f} {currency} today may cost {future_cost:.2f} {currency} in {time_str}")
            print(f"• Your buying power loss = {power_loss_pct:.1f}%\n")

            print("🌍 Market Insight:")
            print(f"• {market_news[currency]}\n")

            print("📊 Confidence Meter:")
            print("Based on historical BTC growth (45%/year) and current inflation.")
            print("While past performance is no guarantee, it offers insight into future trends.\n")

        else:
            print(f"💡 Tu configuración:")
            print(f"• Ingresaste: {fiat:.2f} {currency}")
            print(f"• Periodo de tiempo: {time_str}")
            print(f"• Precio actual de BTC: ${btc_price_usd:,.2f} USD")
            print(f"• Inflación: {inflation*100:.1f}%")
            print(f"• Crecimiento estimado BTC: {btc_growth_rate*100:.1f}% anual\n")

            print("📈 ¿Qué significa esto si cambias tu dinero a BTC?")
            print(f"• Precio futuro de BTC: ${future_btc_price_usd:,.2f} USD")
            print(f"• BTC que podrías comprar hoy: {btc_now:.8f} BTC ({sats_now:,} sats)")
            print(f"• BTC que podrías comprar en {time_str}: {btc_future:.8f} BTC ({sats_future:,} sats)")
            print(f"• Comprar ahora te da ≈ {sats_diff:,} sats más\n")

            print(f"💰 Proyecciones en {currency}:")
            print(f"• Tu dinero después de la inflación: {adjusted_fiat_local:.2f} {currency}")
            print(f"• Pérdida estimada: ≈ {loss_value:.2f} {currency}\n")

            print("🛒 Impacto en poder adquisitivo:")
            print(f"• Lo que hoy cuesta {fiat:.0f} {currency}, podría costar {future_cost:.2f} {currency} en {time_str}")
            print(f"• Tu pérdida de poder adquisitivo = {power_loss_pct:.1f}%\n")

            print("🌍 Contexto del mercado:")
            print(f"• {market_news[currency]}\n")

            print("📊 Nivel de confianza:")
            print("Basado en crecimiento histórico de BTC (45% anual) y la inflación actual.")
            print("Aunque no se garantiza el futuro, ofrece perspectiva útil.\n")

        # --- Chart ---
        plt.figure(figsize=(6, 3))
        bars = plt.bar(['Future (BTC)', 'Future (Cash)'], [future_btc_value_local, adjusted_fiat_local], color=['#43a047', '#e53935'])
        plt.title(f"Projected Value in {currency}")
        plt.ylabel(f"{currency} Value")
        plt.grid(axis='y', linestyle='--', alpha=0.3)

        for bar in bars:
            yval = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2, yval + max(2, yval * 0.01), f"{yval:.0f}", ha='center', va='bottom')

        plt.tight_layout()
        plt.show()

# --- Display UI ---
run_button.on_click(simulate_projection)
display(widgets.VBox([
    widgets.HTML("<h2><b>SacraCalc – Compare Fiat vs BTC</b></h2>"),
    amount_input,
    years_input,
    months_input,
    currency_dropdown,
    language_toggle,
    run_button,
    output,
    learn_more_link
], layout=widgets.Layout(width='100%', padding='10px')))
